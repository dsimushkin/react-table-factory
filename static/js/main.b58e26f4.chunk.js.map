{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Table","composeDecorators","withHeaderControl","withHeaderCellOverflow","withEmptyRow","isEmpty","_ref","data","Component","react_default","a","createElement","style","textAlign","withAdaptive","width","withInMemorySortingContext","defaultDirection","withLazyLoading","Loading","padding","withInlineDetailsContext","isSelectable","index","keyFactory","clearOnDataChange","withFixedHeader","generateData","size","arguments","length","undefined","Array","fill","map","_","i","reduce","r","j","Object","objectSpread","defineProperty","concat","Math","ceil","random","columns","name","sortable","header","cell","_ref2","Fragment","data2","removeAdaptiveColname","hideFullSize","whiteSpace","_ref3","removeOverflowWrapper","_ref4","disabled","index_es","_ref5","className","data5","hideAdaptive","_ref6","rowIndex","_useContext","useContext","DetailsContext","isSelected","marginLeft","minWidth","control","InlineDetails","_ref7","keys","key","EnhanceTableBehaviour","selection","sorting","SortableContext","useEffect","selected","clear","sortOrder","requestsReducer","state","action","type","fetching","toConsumableArray","value","App","timeout","_useReducer","useReducer","_useReducer2","slicedToArray","_useReducer2$","dispatch","clearTimeout","App_Table","fetch","setTimeout","detailsRenderer","App_EnhanceTableBehaviour","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b58e26f4.chunk.js","sourcesContent":["import React, { useEffect, useContext, useReducer } from 'react';\n\nimport './App.css';\n\n// import the styles\nimport './Table.scss';\n\n// import table factory decorators\nimport { \n  composeDecorators,\n  withHeaderCellOverflow,\n  withAdaptive,\n  withInMemorySortingContext, Sorter,\n  withInlineDetailsContext,\n  withFixedHeader,\n  DetailsContext,\n  SortableContext,\n  withHeaderControl,\n  withLazyLoading,\n  withEmptyRow\n} from 'react-table-factory';\n\nconst Table = composeDecorators(\n  withHeaderControl,\n  withHeaderCellOverflow,\n  withEmptyRow({\n    isEmpty: ({data}) => data.isEmpty,\n    Component: () => (\n      <div style={{textAlign: 'center'}}>Empty row</div>\n    )\n  }),\n  withAdaptive({\n    width: 940\n  }),\n  withInMemorySortingContext({\n    defaultDirection: 'desc'\n  }),\n  withLazyLoading({\n    Loading: () => <div style={{textAlign: 'center', padding: 20}}>Fetching</div>,\n  }),\n  withInlineDetailsContext({\n    isSelectable: (data, index) => index % 3 === 0 || index % 3 === 1,\n    keyFactory: (data, index) => index,\n    clearOnDataChange: false\n  }),\n  withFixedHeader // should be last\n)()\n\n// mock data\nconst generateData = (size=20) => Array(size).fill(undefined).map((_,i) => (\n  Array(6).fill(undefined).reduce((r, _, j) => ({\n    ...r, [`data${j+1}`]: `${Math.ceil(Math.random()*20)} in data[${i}, ${j+1}]`\n  }), {})\n)).concat({isEmpty: true});\n\n// define columns configuration\nconst columns = [\n  {\n      name: 'data1',\n      style: {width: '30%'},\n      sortable: true,\n  },\n  {\n      name: 'Description',\n      header: () => (\n        <span>Description</span>\n      ),\n      cell: ({data}) => (\n        <React.Fragment>\n          <span>A very long description cell hidden in full size and with no col name in adaptive: {data.data2}</span>\n        </React.Fragment>\n      ),\n      style: {width: '30%'},\n      sortable: true,\n      removeAdaptiveColname: true,\n      hideFullSize: true,\n  },\n  {\n    sortable: true,\n    name: 'data3',\n    header: () => (\n      <span style={{whiteSpace: 'nowrap'}}>Very long name for displaying data 3</span>\n    ),\n    cell: ({data}) => (\n      <React.Fragment>\n        <span>some text and {data['data3']}</span>\n      </React.Fragment>\n    ),\n    style: {width: '10%'},\n  },\n  {\n      name: 'data4',\n      style: {width: '12%'},\n      header: () => (\n        <span>Data 4 Not sortable and without overflow wrapper</span>\n      ),\n      sortable: false,\n      removeOverflowWrapper: true,\n  },\n  {\n      name: ['data5', 'data6'],\n      header: ({disabled}) => (\n        <React.Fragment>\n          <div>With multisort (hidden in adaptive)</div>\n          <Sorter name=\"data5\" disabled={disabled} Component=\"span\">\n            Data 5\n          </Sorter>\n          ,\n          <Sorter name=\"data6\" disabled={disabled} Component=\"span\">\n            Data 6\n          </Sorter>\n        </React.Fragment>\n      ),\n      cell: ({data}) => (\n        <div className=\"multi-line\">\n          <div>{data.data5}</div>\n          <div>{data['data6']}</div>\n        </div>\n      ),\n      sortable: true,\n      style: {width: '500px'},\n      hideAdaptive: true\n  },\n  {\n    header: () => (\n      <span>Cell indexies</span>\n    ),\n    cell: function IndexiesCell({index, rowIndex}) {\n      const {isSelectable, isSelected} = useContext(DetailsContext);\n      return (\n        <React.Fragment>\n          <span>{`[${rowIndex},${index}]`}</span>\n          <span style={{marginLeft: 10}}>{\n            isSelected(rowIndex)\n              ? 'selected'\n              : (\n                isSelectable(rowIndex)\n                  ? 'selectable'\n                  : 'not selectable'\n                )\n            }</span>\n        </React.Fragment>\n      )\n    },\n    style: {minWidth: '80px'},\n    removeOverflowWrapper: true\n  },\n  {\n    header: () => <span>Hello</span>,\n    control: true,\n    style: {minWidth: 100}\n  }\n]\n\nconst InlineDetails = ({data, index}) => {\n  return (\n    <div>\n      <p>\n        Details of row {index}\n      </p>\n      { Object.keys(data).map((key, i) => (\n        <p key={i}>\n          <label>{key} : </label>\n          <span>{data[key]}</span>\n        </p>\n      )) }\n    </div>\n  )\n}\n\nconst EnhanceTableBehaviour = () => {\n  const selection = useContext(DetailsContext);\n  const sorting = useContext(SortableContext);\n\n  useEffect(\n    () => {\n      if (selection.selected.length) {\n        selection.clear();\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [sorting.sortOrder]\n  )\n\n  return null;\n}\n\nconst requestsReducer = (state, action) => {\n  switch(action.type) {\n    case '@fetch':\n      return {\n        ...state,\n        fetching: true\n      }\n    case '@add':\n      return {\n        ...state,\n        data: [...state.data, ...action.value],\n        fetching: false\n      }\n    default:\n      return state;\n  }\n}\n\nconst App = () => {\n  const [{data, fetching}, dispatch] = useReducer(\n    requestsReducer, {\n      data: generateData(20),\n      fetching: false\n    }\n  );\n\n  let timeout;\n  const fetch = () => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      dispatch({type: '@add', value: generateData(20)});\n    }, 2000);\n    dispatch({type: '@fetch'});\n  }\n\n  useEffect(\n    () => {\n      return () => {\n        clearTimeout(timeout);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Table example\n        </p>\n      </header>\n      <main>\n        <Table\n          data={data}\n          fetching={fetching}\n          fetch={fetch}\n          className=\"default-theme\"\n          // defaultSortParameter=\"data1\"\n          // defaultSortDirection=\"asc\"\n          detailsRenderer={InlineDetails}\n          columns={columns}\n        >\n          <EnhanceTableBehaviour />\n        </Table>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}