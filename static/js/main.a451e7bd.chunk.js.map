{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Table","composeDecorators","withHeaderControl","withHeaderCellOverflow","withEmptyRow","isEmpty","data","Component","style","textAlign","withAdaptive","width","withInMemorySortingContext","defaultDirection","withLazyLoading","threshold","Loading","padding","withInlineDetailsContext","isSelectable","index","keyFactory","clearOnDataChange","withFixedHeader","generateData","size","Array","fill","undefined","map","_","i","reduce","r","j","Math","ceil","random","concat","columns","name","sortable","header","cell","Fragment","data2","removeAdaptiveColname","hideFullSize","whiteSpace","removeOverflowWrapper","disabled","className","data5","hideAdaptive","rowIndex","useContext","DetailsContext","isSelected","marginLeft","minWidth","control","InlineDetails","Object","keys","key","EnhanceTableBehaviour","selection","sorting","SortableContext","useEffect","selected","length","clear","sortOrder","requestsReducer","state","action","type","fetching","value","App","timeout","useReducer","dispatch","clearTimeout","fetch","setTimeout","detailsRenderer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a451e7bd.chunk.js","sourcesContent":["import React, { useEffect, useContext, useReducer } from \"react\";\n\nimport \"./App.css\";\n\n// import the styles\nimport \"./Table.scss\";\n\n// import table factory decorators\nimport {\n  composeDecorators,\n  withHeaderCellOverflow,\n  withAdaptive,\n  withInMemorySortingContext,\n  Sorter,\n  withInlineDetailsContext,\n  withFixedHeader,\n  DetailsContext,\n  SortableContext,\n  withHeaderControl,\n  withLazyLoading,\n  withEmptyRow\n} from \"react-table-factory\";\n\nconst Table = composeDecorators(\n  withHeaderControl,\n  withHeaderCellOverflow,\n  withEmptyRow({\n    isEmpty: ({ data }) => data.isEmpty,\n    Component: () => <div style={{ textAlign: \"center\" }}>Empty row</div>\n  }),\n  withAdaptive({\n    width: 940\n  }),\n  withInMemorySortingContext({\n    defaultDirection: \"desc\"\n  }),\n  withLazyLoading({\n    threshold: 500,\n    Loading: () => (\n      <div style={{ textAlign: \"center\", padding: 20 }}>Loading</div>\n    )\n  }),\n  withInlineDetailsContext({\n    isSelectable: (data, index) => index % 3 === 0 || index % 3 === 1,\n    keyFactory: (data, index) => index,\n    clearOnDataChange: false\n  }),\n  withFixedHeader // should be last\n)();\n\n// mock data\nconst generateData = (size = 20) =>\n  Array(size)\n    .fill(undefined)\n    .map((_, i) =>\n      Array(6)\n        .fill(undefined)\n        .reduce(\n          (r, _, j) => ({\n            ...r,\n            [`data${j + 1}`]: `${Math.ceil(\n              Math.random() * 20\n            )} in data[${i}, ${j + 1}]`\n          }),\n          {}\n        )\n    )\n    .concat({ isEmpty: true });\n\n// define columns configuration\nconst columns = [\n  {\n    name: \"data1\",\n    style: { width: \"30%\" },\n    sortable: true\n  },\n  {\n    name: \"Description\",\n    header: () => <span>Description</span>,\n    cell: ({ data }) => (\n      <React.Fragment>\n        <span>\n          A very long description cell hidden in full size and with no col name\n          in adaptive: {data.data2}\n        </span>\n      </React.Fragment>\n    ),\n    style: { width: \"30%\" },\n    sortable: true,\n    removeAdaptiveColname: true,\n    hideFullSize: true\n  },\n  {\n    sortable: true,\n    name: \"data3\",\n    header: () => (\n      <span style={{ whiteSpace: \"nowrap\" }}>\n        Very long name for displaying data 3\n      </span>\n    ),\n    cell: ({ data }) => (\n      <React.Fragment>\n        <span>some text and {data[\"data3\"]}</span>\n      </React.Fragment>\n    ),\n    style: { width: \"10%\" }\n  },\n  {\n    name: \"data4\",\n    style: { width: \"12%\" },\n    header: () => <span>Data 4 Not sortable and without overflow wrapper</span>,\n    sortable: false,\n    removeOverflowWrapper: true\n  },\n  {\n    name: [\"data5\", \"data6\"],\n    header: ({ disabled }) => (\n      <React.Fragment>\n        <div>With multisort (hidden in adaptive)</div>\n        <Sorter name=\"data5\" disabled={disabled} Component=\"span\">\n          Data 5\n        </Sorter>\n        ,\n        <Sorter name=\"data6\" disabled={disabled} Component=\"span\">\n          Data 6\n        </Sorter>\n      </React.Fragment>\n    ),\n    cell: ({ data }) => (\n      <div className=\"multi-line\">\n        <div>{data.data5}</div>\n        <div>{data[\"data6\"]}</div>\n      </div>\n    ),\n    sortable: true,\n    style: { width: \"500px\" },\n    hideAdaptive: true\n  },\n  {\n    header: () => <span>Cell indexies</span>,\n    cell: function IndexiesCell({ index, rowIndex }) {\n      const { isSelectable, isSelected } = useContext(DetailsContext);\n      return (\n        <React.Fragment>\n          <span>{`[${rowIndex},${index}]`}</span>\n          <span style={{ marginLeft: 10 }}>\n            {isSelected(rowIndex)\n              ? \"selected\"\n              : isSelectable(rowIndex)\n              ? \"selectable\"\n              : \"not selectable\"}\n          </span>\n        </React.Fragment>\n      );\n    },\n    style: { minWidth: \"80px\" },\n    removeOverflowWrapper: true\n  },\n  {\n    header: () => <span>Hello</span>,\n    control: true,\n    style: { minWidth: 100 }\n  }\n];\n\nconst InlineDetails = ({ data, index }) => {\n  return (\n    <div>\n      <p>Details of row {index}</p>\n      {Object.keys(data).map((key, i) => (\n        <p key={i}>\n          <label>{key} : </label>\n          <span>{data[key]}</span>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nconst EnhanceTableBehaviour = () => {\n  const selection = useContext(DetailsContext);\n  const sorting = useContext(SortableContext);\n\n  useEffect(\n    () => {\n      if (selection.selected.length) {\n        selection.clear();\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [sorting.sortOrder]\n  );\n\n  return null;\n};\n\nconst requestsReducer = (state, action) => {\n  switch (action.type) {\n    case \"@fetch\":\n      return {\n        ...state,\n        fetching: true\n      };\n    case \"@add\":\n      return {\n        ...state,\n        data: [...state.data, ...action.value],\n        fetching: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [{ data, fetching }, dispatch] = useReducer(requestsReducer, {\n    data: generateData(20),\n    fetching: false\n  });\n\n  let timeout;\n  const fetch = () => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      dispatch({ type: \"@add\", value: generateData(20) });\n    }, 500);\n    dispatch({ type: \"@fetch\" });\n  };\n\n  useEffect(\n    () => {\n      return () => {\n        clearTimeout(timeout);\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Table example</p>\n      </header>\n      <main>\n        <Table\n          data={data}\n          fetching={fetching}\n          fetch={fetch}\n          className=\"default-theme\"\n          // defaultSortParameter=\"data1\"\n          // defaultSortDirection=\"asc\"\n          detailsRenderer={InlineDetails}\n          columns={columns}\n        >\n          <EnhanceTableBehaviour />\n        </Table>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}